= 005 - Assignments =

By request, I’m explaining the assignments from class 5 in a bit more detail. 

Sometimes the space offered by a slide is just not enough to make an assignment clear. :)



== Assignment 1 (from class 004) ==

Create a script which takes two forms on input:

1. One from a parameter passed on the command line.
    This should be a name. e.g. “Tess”.
2. Another, from interactive input from the user.
    Ask the user which greeting they would like. e.g. “Hello”.

These inputs should be combined into a greeting, e.g. “Hello Tess!”.

=== Defensive coding ===

n.a.

=== Example output ===

./greeting.sh Tess
How would you like to be greeted?
Hello

Hello Tess!



== Assignment 2 (from class 004)  ==

=== 2a ===

Use “find” or “locate” to …
* Find all files with “passwd” in their name.
* Find all files ,literally called "passwd”.
* Find all world-writable files.

=== 2b ===

Use a HEREDOC to SSH to localhost (or ubuntu) and run these two commands in one go: 
* touch /tmp/foobar
* ls /tmp

After asking for your password, the output should consist of a listing of all files in /tmp, which should include a file called “foobar”. 



== Assignment 3 (from class 004)  ==

We will create a shell script which either creates or removes a number of extra, dummy users. This may be useful for later labs!

The script takes one parameter from the command line: the positional parameter $1 should either be “create” or “remove”, depending on if you want to create/remove the users.

The script will then ask you for a number, greater than 0 (zero) and equal or lower than 20 (twenty). This number will be called “N” from now on. 

The script will then loop N times, to create the indicated amount of new user accounts. 

These user accounts must:
* Have name “userN”
* Have a home directory, “/home/userN”.
* Have a file in the home directory, “/home/userN/welcome.txt”.
* The contents of this file must be created using a HEREDOC.

=== Defensive coding ===

Here’s some extra things you could try and build into your script.

* Test if $1 is actually “create” or “remove”. Give an error if it’s anything else.
* Test if the amount is actually less than or equal to 20. 
* Before creating users, test if they exist.
* Before removing users, test if they exist. 

=== Example output ===

./task3.sh create
How many?
4
Creating user1
Creating user2
Creating user3
Creating user4



== Assignment 4 (from class 004) ==

Write a shell script which reads one parameter from the command line:

1. The first three octets of an IPv4 address, like: 192.168.0

The shell script should loop through the valid IP addresses for this range, e.g. 192.168.0.[1-254].

The script will need to then loop through all the IP addresses that are valid and test if that host is available on the network. This can be done using “ping -c 1” (to simply test with one single ping).

There are different ways to test if the ping was successful (like grep-ing in the output, or checking exit codes). 

=== Defensive coding ===

Optional coding ideas include: 

* Validate that the input really is three octets, so [1-255] followed by a dot, followed by [0-255], followed by a dot and again by [0-255].
* Test with a regular expression of the base IP is actually an IP address.
* Add parallelism, so you can test multiple pings at the same time. 

=== Example output ===

./pingsweep 10.0.2
10.0.2.4 is up 
10.0.2.6 is up


=============== New Assignments for class 005 ===============

== Assignment 1 Evolved (building on class 004) ==

Adjust the greeting.sh script which you created earlier. 

1. One from a parameter passed on the command line.
    This should be a name. e.g. “Tess”.
2. Another, from interactive input from the user.
    Ask the user which greeting they would like. e.g. “Hello”.
3. The desired greeting from step 2 should be stored in a configuration file.
    For example greeting.cfg.
4. Every time you run greeting.sh, check if the configuration file exists.
    If it does exist, you do NOT read the desired greeting from stdin.
    Instead, read the greeting from the configuration file.

These inputs should be combined into a greeting, e.g. “Hello Tess!”.

=== Defensive coding ===

You could:

* Add an extra flag/parameter (so $2), which will reset the greeting in the file if it’s “-r”.
* Make the configuration file store greetings on a per-user basis. So for example "Tess:hello".

=== Example output ===

./greeting.sh Tess
How would you like to be greeted?
Hello

Hello Tess!

./greeting.sh Tess
Hello Tess!

rm ./greeting.sh

./greeting.sh Tess
How would you like to be greeted?
Hello

Hello Tess!


== Assignment 5 ==

Write a file which contains a number of hostnames or IP addresses. You can simply enter “fedora” and “ubuntu”, for testing purposes.

You will write a shell script which reads this file with hostnames. It will repeat a set of steps for each of the hostnames in the text file. 

These steps are:
* SSH to the host, using your account.
* On that target host, use “find” to search for files that have the “setuid” permission. 
* Store the output of that “find” command on the SOURCE host.
* The output files go into your home directory, in a subdir called “setuid”.
* Make one output file per host.

=== Defensive coding ===

You could:

* Use SSH keys with “ssh-agent” to skip entering your password all the time.
* Test if the hostname is actually resolvable. Else give an error for that target host. 
* Test if the target host is actually reachable. Else give an error for that target host.
* Test if the output directory on your host exists. Else create it.
* Test if files are in the output directory. If yes, ask before deleting them. 

=== Example output ===

./find-setuid.sh hostlist.txt
password:
password:

ls -al ~/setuid/*
fedora         ubuntu       



== Assignment 6 ==

Take the pingsweep script from assignment 4 and expand it so you can use it to test for a number of interesting TCP/IP ports. If the script finds a host that is available (reachable), it should then test if those ports can be reached.

You can hard-code the ports, or pass them via the command line. 

Hint: You can test a port with Bash net redirection:

* timeout 3 bash -c 'echo 1 >/dev/tcp/192.168.200.20/22'

=== Example output ===

./portsweep 10.0.2.0 24
10.0.2.4 is up
10.0.2.4 has port 22
10.0.2.6 is up
10.0.2.4 has port 21
10.0.2.4 has port 22
10.0.2.4 has port 80



== Assignment 7 ==

Make a shell script which reads /etc/passwd and searched for “real” users. As in: user accounts which probably belong to people. Remember, we have already seen that most “real” users have a UID equal to or higher than 1000. Or 500 on some Linuxen.

For each of these users, take their username and use it to generate an email address. e.g. “user1@domain.com”.

Make a tab-delimited file (so, fields are separated by tabs NOT spaces). Each line in that file should consist of the username, a tab and then the email address. 

Hint: just typing a tab in your echo will not always work correctly. You will need to add a special tab char.

Hint: you can use assignment 3 to create a few test users.

=== Example output

./emails.sh

cat emails.txt
tess		tess@domain.com
pete		pete@domain.com
user1		user1@domain.com
user2		user2@domain.com
user3		user3@domain.com
user4		user4@domain.com



== Assignment 8 ==

Before starting, make a backup copy of “/etc/login.defs”. 

Using the command line, NOT a text editor, change the setting of UMASK from 022 to 027.

You will need to first view the file, or “grep” for the relevant line, to see what you should or should not change. In the end only ONE line should have changed!

Make sure to only change the relevant correct line. You can test if your script worked correctly by comparing the new “login.defs” to your backup copy using the “diff” command. The output of “diff” should only show one line of differences, with the newly changed value for umask. 

Hint: you’ll probably want to use the “sed” command.

